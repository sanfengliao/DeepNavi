#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Coor(object):
    """
    Attributes:
     - x
     - y
     - z

    """


    def __init__(self, x=None, y=None, z=None,):
        self.x = x
        self.y = y
        self.z = z

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.y = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.z = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Coor')
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.DOUBLE, 1)
            oprot.writeDouble(self.x)
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.DOUBLE, 2)
            oprot.writeDouble(self.y)
            oprot.writeFieldEnd()
        if self.z is not None:
            oprot.writeFieldBegin('z', TType.DOUBLE, 3)
            oprot.writeDouble(self.z)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.x is None:
            raise TProtocolException(message='Required field x is unset!')
        if self.y is None:
            raise TProtocolException(message='Required field y is unset!')
        if self.z is None:
            raise TProtocolException(message='Required field z is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FeelSensor(object):
    """
    Attributes:
     - value

    """


    def __init__(self, value=None,):
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.value = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FeelSensor')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.DOUBLE, 1)
            oprot.writeDouble(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NaviModel(object):
    """
    Attributes:
     - image
     - magneticList
     - accelerometerList
     - orientationList
     - gyroscopeList
     - gravityList
     - linearAccelerationList
     - ambientTemperatureList
     - lightList
     - pressureList
     - proximityList
     - wifiList
     - modelPath

    """


    def __init__(self, image=None, magneticList=None, accelerometerList=None, orientationList=None, gyroscopeList=None, gravityList=None, linearAccelerationList=None, ambientTemperatureList=None, lightList=None, pressureList=None, proximityList=None, wifiList=None, modelPath=None,):
        self.image = image
        self.magneticList = magneticList
        self.accelerometerList = accelerometerList
        self.orientationList = orientationList
        self.gyroscopeList = gyroscopeList
        self.gravityList = gravityList
        self.linearAccelerationList = linearAccelerationList
        self.ambientTemperatureList = ambientTemperatureList
        self.lightList = lightList
        self.pressureList = pressureList
        self.proximityList = proximityList
        self.wifiList = wifiList
        self.modelPath = modelPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.image = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.magneticList = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Coor()
                        _elem5.read(iprot)
                        self.magneticList.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.accelerometerList = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = Coor()
                        _elem11.read(iprot)
                        self.accelerometerList.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.orientationList = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = Coor()
                        _elem17.read(iprot)
                        self.orientationList.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.gyroscopeList = []
                    (_etype21, _size18) = iprot.readListBegin()
                    for _i22 in range(_size18):
                        _elem23 = Coor()
                        _elem23.read(iprot)
                        self.gyroscopeList.append(_elem23)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.gravityList = []
                    (_etype27, _size24) = iprot.readListBegin()
                    for _i28 in range(_size24):
                        _elem29 = Coor()
                        _elem29.read(iprot)
                        self.gravityList.append(_elem29)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.linearAccelerationList = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = Coor()
                        _elem35.read(iprot)
                        self.linearAccelerationList.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.ambientTemperatureList = []
                    (_etype39, _size36) = iprot.readListBegin()
                    for _i40 in range(_size36):
                        _elem41 = FeelSensor()
                        _elem41.read(iprot)
                        self.ambientTemperatureList.append(_elem41)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.lightList = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = FeelSensor()
                        _elem47.read(iprot)
                        self.lightList.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.pressureList = []
                    (_etype51, _size48) = iprot.readListBegin()
                    for _i52 in range(_size48):
                        _elem53 = FeelSensor()
                        _elem53.read(iprot)
                        self.pressureList.append(_elem53)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.proximityList = []
                    (_etype57, _size54) = iprot.readListBegin()
                    for _i58 in range(_size54):
                        _elem59 = FeelSensor()
                        _elem59.read(iprot)
                        self.proximityList.append(_elem59)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.wifiList = []
                    (_etype63, _size60) = iprot.readListBegin()
                    for _i64 in range(_size60):
                        _elem65 = iprot.readI32()
                        self.wifiList.append(_elem65)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.modelPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NaviModel')
        if self.image is not None:
            oprot.writeFieldBegin('image', TType.STRING, 1)
            oprot.writeBinary(self.image)
            oprot.writeFieldEnd()
        if self.magneticList is not None:
            oprot.writeFieldBegin('magneticList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.magneticList))
            for iter66 in self.magneticList:
                iter66.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.accelerometerList is not None:
            oprot.writeFieldBegin('accelerometerList', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.accelerometerList))
            for iter67 in self.accelerometerList:
                iter67.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.orientationList is not None:
            oprot.writeFieldBegin('orientationList', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.orientationList))
            for iter68 in self.orientationList:
                iter68.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gyroscopeList is not None:
            oprot.writeFieldBegin('gyroscopeList', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.gyroscopeList))
            for iter69 in self.gyroscopeList:
                iter69.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.gravityList is not None:
            oprot.writeFieldBegin('gravityList', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.gravityList))
            for iter70 in self.gravityList:
                iter70.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.linearAccelerationList is not None:
            oprot.writeFieldBegin('linearAccelerationList', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.linearAccelerationList))
            for iter71 in self.linearAccelerationList:
                iter71.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ambientTemperatureList is not None:
            oprot.writeFieldBegin('ambientTemperatureList', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.ambientTemperatureList))
            for iter72 in self.ambientTemperatureList:
                iter72.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.lightList is not None:
            oprot.writeFieldBegin('lightList', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.lightList))
            for iter73 in self.lightList:
                iter73.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.pressureList is not None:
            oprot.writeFieldBegin('pressureList', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.pressureList))
            for iter74 in self.pressureList:
                iter74.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.proximityList is not None:
            oprot.writeFieldBegin('proximityList', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.proximityList))
            for iter75 in self.proximityList:
                iter75.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.wifiList is not None:
            oprot.writeFieldBegin('wifiList', TType.LIST, 12)
            oprot.writeListBegin(TType.I32, len(self.wifiList))
            for iter76 in self.wifiList:
                oprot.writeI32(iter76)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.modelPath is not None:
            oprot.writeFieldBegin('modelPath', TType.STRING, 13)
            oprot.writeString(self.modelPath.encode('utf-8') if sys.version_info[0] == 2 else self.modelPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LocationResult(object):
    """
    Attributes:
     - coor
     - rotation

    """


    def __init__(self, coor=None, rotation=None,):
        self.coor = coor
        self.rotation = rotation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.coor = Coor()
                    self.coor.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.rotation = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LocationResult')
        if self.coor is not None:
            oprot.writeFieldBegin('coor', TType.STRUCT, 1)
            self.coor.write(oprot)
            oprot.writeFieldEnd()
        if self.rotation is not None:
            oprot.writeFieldBegin('rotation', TType.DOUBLE, 2)
            oprot.writeDouble(self.rotation)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Coor)
Coor.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'x', None, None, ),  # 1
    (2, TType.DOUBLE, 'y', None, None, ),  # 2
    (3, TType.DOUBLE, 'z', None, None, ),  # 3
)
all_structs.append(FeelSensor)
FeelSensor.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'value', None, None, ),  # 1
)
all_structs.append(NaviModel)
NaviModel.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'image', 'BINARY', None, ),  # 1
    (2, TType.LIST, 'magneticList', (TType.STRUCT, [Coor, None], False), None, ),  # 2
    (3, TType.LIST, 'accelerometerList', (TType.STRUCT, [Coor, None], False), None, ),  # 3
    (4, TType.LIST, 'orientationList', (TType.STRUCT, [Coor, None], False), None, ),  # 4
    (5, TType.LIST, 'gyroscopeList', (TType.STRUCT, [Coor, None], False), None, ),  # 5
    (6, TType.LIST, 'gravityList', (TType.STRUCT, [Coor, None], False), None, ),  # 6
    (7, TType.LIST, 'linearAccelerationList', (TType.STRUCT, [Coor, None], False), None, ),  # 7
    (8, TType.LIST, 'ambientTemperatureList', (TType.STRUCT, [FeelSensor, None], False), None, ),  # 8
    (9, TType.LIST, 'lightList', (TType.STRUCT, [FeelSensor, None], False), None, ),  # 9
    (10, TType.LIST, 'pressureList', (TType.STRUCT, [FeelSensor, None], False), None, ),  # 10
    (11, TType.LIST, 'proximityList', (TType.STRUCT, [FeelSensor, None], False), None, ),  # 11
    (12, TType.LIST, 'wifiList', (TType.I32, None, False), None, ),  # 12
    (13, TType.STRING, 'modelPath', 'UTF8', None, ),  # 13
)
all_structs.append(LocationResult)
LocationResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'coor', [Coor, None], None, ),  # 1
    (2, TType.DOUBLE, 'rotation', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
