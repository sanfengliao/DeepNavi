package com.sysu.example.activity

import android.annotation.SuppressLint
import android.graphics.Bitmap
import android.graphics.drawable.BitmapDrawable
import android.os.Bundle
import android.util.Size
import android.view.MotionEvent
import android.view.View
import android.widget.Button
import android.widget.RelativeLayout
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.isVisible
import com.google.android.material.bottomsheet.BottomSheetBehavior
import com.liang.example.json_ktx.ReflectJsonApi
import com.liang.example.json_ktx.SimpleJsonArray
import com.liang.example.json_ktx.SimpleJsonObject
import com.liang.example.json_ktx.SimpleJsonParser
import com.liang.example.json_ktx.SimpleJsonString
import com.sysu.deepnavi.DeepNaviManager
import com.sysu.deepnavi.impl.AudioListener2
import com.sysu.deepnavi.impl.SensorListeners
import com.sysu.deepnavi.impl.WifiListener
import com.sysu.deepnavi.inter.DataCollectorInter
import com.sysu.example.KeyUrls.GET_POINTS
import com.sysu.example.R
import com.sysu.example.fragment.AddEdgeDialogFragment
import com.sysu.example.fragment.AddPointDialogFragment
import com.sysu.example.bean.DeepNaviCoordinator
import com.sysu.example.bean.DeepNaviEdge
import com.sysu.example.bean.DeepNaviMap
import com.sysu.example.bean.DeepNaviPoint
import com.sysu.example.bean.INVALID_STR
import com.sysu.example.fragment.SearchMapDialogFragment
import com.sysu.example.fragment.UploadMapDialogFragment
import com.sysu.example.map_view.LineEdge
import com.sysu.example.map_view.MapContainer
import com.sysu.example.map_view.Marker
import com.sysu.example.utils.add
import com.sysu.example.utils.doGetMainAsync
import com.sysu.example.utils.returnToast3
import kotlinx.android.synthetic.main.activity_map.bottom_sheet
import kotlinx.android.synthetic.main.activity_map.cancel_navigation
import kotlinx.android.synthetic.main.activity_map.config_map_bar
import kotlinx.android.synthetic.main.activity_map.map_container
import kotlinx.android.synthetic.main.activity_map.navigation_bar
import kotlinx.android.synthetic.main.activity_map.start_navigation
import kotlinx.android.synthetic.main.activity_map.stop_navigation
import kotlinx.android.synthetic.main.bottom_sheet_point_info.as_end_point
import kotlinx.android.synthetic.main.bottom_sheet_point_info.as_start_point
import kotlinx.android.synthetic.main.bottom_sheet_point_info.point_actual_location
import kotlinx.android.synthetic.main.bottom_sheet_point_info.point_id
import kotlinx.android.synthetic.main.bottom_sheet_point_info.point_map_id
import kotlinx.android.synthetic.main.bottom_sheet_point_info.point_name
import kotlinx.android.synthetic.main.bottom_sheet_point_info.point_plan_location
import kotlin.math.asin
import kotlin.math.atan2
import kotlin.math.cos
import kotlin.math.pow
import kotlin.math.sin
import kotlin.math.sqrt

class MapActivity : AppCompatActivity(), MapContainer.OnMarkerClickListener, UploadMapDialogFragment.UpdateMapBitmap,
    AddPointDialogFragment.UpdateMapPoint, UploadMapDialogFragment.UpdateMapInfo, AddEdgeDialogFragment.UpdateMapEdge, SearchMapDialogFragment.GetAllPoints {
    private var bitmap: Bitmap? = null
    private var mapInfo: DeepNaviMap? = null
        set(value) {
            field = value
            allPoints = null
        }
    private var allPoints: MutableList<DeepNaviPoint>? = null
        set(value) {
            field = value
            val mapInfo = this.mapInfo ?: return
            if (value.isNullOrEmpty()) {
                map_container.mMarkers = null
                allEdges = null
            } else {
                map_container.mMarkers = value.map {
                    Marker(it.planCoordinate.x / mapInfo.planSize[0], it.planCoordinate.y / mapInfo.planSize[1], name = it.id)
                }.toMutableList()
                val edges = mutableListOf<DeepNaviEdge>()
                if (deepNaviManager.pathId == null) {
                    value.forEachIndexed { i1, p1 ->
                        val p1Id = p1.id ?: return@forEachIndexed
                        p1.adjacence.forEach { p2Id ->
                            val i2 = value.indexOfFirst { it.id == p2Id }
                            if (i2 > i1) {
                                edges.add(DeepNaviEdge(p1.mapId, p1Id, p2Id))
                            }
                        }
                    }
                } else {
                    var p1Id = value.first().id ?: return
                    for (index in 1 until value.size) {
                        val p2Id = value[index].id ?: continue
                        edges.add(DeepNaviEdge(mapInfo.id!!, p1Id, p2Id))
                        p1Id = p2Id
                    }
                }
                allEdges = edges
            }
        }
    private var allEdges: MutableList<DeepNaviEdge>? = null
        set(value) {
            field = value
            if (value == null) {
                map_container.mEdges = null
            } else {
                val markers = map_container.mMarkers ?: return
                map_container.mEdges = value.map { deepNaviEdge ->
                    LineEdge(markers.indexOfFirst { deepNaviEdge.startPointId == it.name }, markers.indexOfFirst { deepNaviEdge.endPointId == it.name })
                }.toMutableList()
            }
        }

    private var marker: Marker? = null
    private var edge: LineEdge? = null
    private lateinit var bottomSheetBehavior: BottomSheetBehavior<RelativeLayout>

    private lateinit var deepNaviManager: DeepNaviManager
    private var audioListener2: AudioListener2? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_map)

        initMapConfigBar()
        initMapAndInfo()
        initNavigation()

        test()
    }

    private fun test() {
        bitmap = ((resources.getDrawable(R.drawable.map_example)) as? BitmapDrawable)?.bitmap
        map_container.mMapView.setImageBitmap(bitmap)
        // map_container.mMarkers = mutableListOf(
        //     Marker(0.02f, 0.02f, R.drawable.point),
        //     Marker(0.98f, 0.02f, R.drawable.point),
        //     Marker(0.98f, 0.98f, R.drawable.point),
        //     Marker(0.02f, 0.98f, R.drawable.point)
        // )
        // map_container.mEdges = mutableListOf(
        //     LineEdge(0, 1),
        //     LineEdge(1, 2),
        //     LineEdge(2, 3),
        //     LineEdge(3, 0)
        // )
        // map_container.pos(0.5f, 0.98f)
        // map_container.rotate(-60f)
        mapInfo = DeepNaviMap().apply {
            id = "5e6e410ff143bf7cc1ca344a"
            planPath = "http://127.0.0.1:5000/static/860bfe6266cc11eaa125185e0ff2d49d"
            name = "超算5楼"
            planUnit = "px"
            planSize = floatArrayOf(577f, 370f, 0f)
            actualUnit = "m"
            actualSize = floatArrayOf(70f, 40f, 0f)
            originInPlan = floatArrayOf(17.31f, 362.6f, 0f)
            originInActual = floatArrayOf(1.4f, 39.2f, 0f)
            rotationAngle = floatArrayOf(180f, 0f, 90f)
            standardVector = "0,1"
        }
        allPoints = mutableListOf(
            mapInfo!!.percentagePoint(0.02f, 0.98f).apply {
                this.id = "0"
                this.adjacence = arrayOf("1", "3")
                this.name = "a"
            },
            mapInfo!!.percentagePoint(0.98f, 0.98f).apply {
                this.id = "1"
                this.adjacence = arrayOf("0", "2")
                this.name = "b"
            },
            mapInfo!!.percentagePoint(0.98f, 0.02f).apply {
                this.id = "2"
                this.adjacence = arrayOf("1", "3")
                this.name = "c"
            },
            mapInfo!!.percentagePoint(0.02f, 0.02f).apply {
                this.id = "3"
                this.adjacence = arrayOf("0", "2")
                this.name = "d"
            }
        )

        val posSet = listOf(
            doubleArrayOf(1.500999629497528076e-01, 1.911513805389404297e-01, 6.340360641479492188e-02),
            doubleArrayOf(1.602425426244735718e-02, 1.095497533679008484e-01, 2.221112996339797974e-01),
            doubleArrayOf(-7.625202089548110962e-02, 1.164697855710983276e-02, 5.710748955607414246e-02),
            doubleArrayOf(2.853665053844451904e-01, 1.761941015720367432e-01, 1.783052682876586914e-01),
            doubleArrayOf(5.398156493902206421e-02, 9.555237740278244019e-02, 3.363985717296600342e-01),
            doubleArrayOf(-4.051295667886734009e-02, 3.972243517637252808e-02, 6.288640201091766357e-02),
            doubleArrayOf(3.362371623516082764e-01, 2.170768976211547852e-01, 1.023902446031570435e-01),
            doubleArrayOf(8.530094474554061890e-02, 9.129246324300765991e-02, 2.221322506666183472e-01),
            doubleArrayOf(7.682140916585922241e-02, 1.216652020812034607e-01, 4.970593377947807312e-02),
            doubleArrayOf(1.014750823378562927e-01, 1.503388643264770508e+00, -1.121705621480941772e-01),
            doubleArrayOf(1.761382520198822021e-01, 3.468333721160888672e+00, -1.477908790111541748e-01),
            doubleArrayOf(2.397142946720123291e-01, 5.330658435821533203e+00, -1.629178225994110107e-01),
            doubleArrayOf(2.157405912876129150e-01, 7.333960056304931641e+00, -1.699463129043579102e-01),
            doubleArrayOf(1.785489618778228760e-01, 9.278953552246093750e+00, -1.433496773242950439e-01),
            doubleArrayOf(9.731259196996688843e-02, 1.131631565093994141e+01, -1.001042872667312622e-01),
            doubleArrayOf(1.354049742221832275e-01, 1.339202022552490234e+01, -1.191074550151824951e-01),
            doubleArrayOf(1.778488457202911377e-01, 1.532141685485839844e+01, -1.395597755908966064e-01),
            doubleArrayOf(9.553053230047225952e-02, 1.763647651672363281e+01, -1.330516636371612549e-01),
            doubleArrayOf(6.957056373357772827e-02, 1.884587097167968750e+01, -1.347758769989013672e-01),
            doubleArrayOf(5.148055404424667358e-02, 2.097149658203125000e+01, -1.562954038381576538e-01),
            doubleArrayOf(4.546545445919036865e-03, 2.267463302612304688e+01, -1.797445118427276611e-01),
            doubleArrayOf(1.079513877630233765e-02, 2.466729164123535156e+01, -1.947128176689147949e-01),
            doubleArrayOf(1.172103732824325562e-02, 2.681480026245117188e+01, -2.151072025299072266e-01),
            doubleArrayOf(1.267328113317489624e-02, 2.881649208068847656e+01, -2.294028699398040771e-01),
            doubleArrayOf(3.656127303838729858e-02, 3.068030738830566406e+01, -2.467546164989471436e-01),
            doubleArrayOf(-6.376124918460845947e-03, 3.242355346679687500e+01, -2.731758356094360352e-01),
            doubleArrayOf(-4.846677929162979126e-02, 3.433043670654296875e+01, -2.810431122779846191e-01),
            doubleArrayOf(-1.003870740532875061e-01, 3.627582168579101562e+01, -3.132521808147430420e-01),
            doubleArrayOf(-3.164110332727432251e-02, 3.816396713256835938e+01, -3.303004801273345947e-01),
            doubleArrayOf(-7.803127914667129517e-02, 3.986757278442382812e+01, -3.224134147167205811e-01),
            doubleArrayOf(-2.150361239910125732e-01, 4.182147216796875000e+01, -3.134250342845916748e-01),
            doubleArrayOf(-2.138955295085906982e-01, 4.370780944824218750e+01, -3.348197340965270996e-01),
            doubleArrayOf(-1.644514501094818115e-01, 4.567933654785156250e+01, -3.530215024948120117e-01),
            doubleArrayOf(-1.970741450786590576e-01, 4.827185440063476562e+01, -3.580797016620635986e-01),
            doubleArrayOf(-2.448926866054534912e-01, 5.009768295288085938e+01, -3.784800469875335693e-01),
            doubleArrayOf(-3.126458823680877686e-01, 5.207952880859375000e+01, -3.981275856494903564e-01),
            doubleArrayOf(-3.656860291957855225e-01, 5.427866744995117188e+01, -3.983090221881866455e-01),
            doubleArrayOf(-4.289043843746185303e-01, 5.638652801513671875e+01, -3.880075514316558838e-01),
            doubleArrayOf(-4.222654998302459717e-01, 5.840325546264648438e+01, -3.998971283435821533e-01),
            doubleArrayOf(-3.491272628307342529e-01, 6.053721618652343750e+01, -4.173424541950225830e-01),
            doubleArrayOf(-3.688788115978240967e-01, 6.192368698120117188e+01, -4.108127057552337646e-01),
            doubleArrayOf(-8.120603561401367188e-01, 6.317795944213867188e+01, -3.812091350555419922e-01),
            doubleArrayOf(-1.365686535835266113e+00, 6.373529434204101562e+01, -2.649170458316802979e-01),
            doubleArrayOf(-3.445777416229248047e+00, 6.416300964355468750e+01, -2.566576302051544189e-01),
            doubleArrayOf(-4.619779109954833984e+00, 6.433682250976562500e+01, -2.751147150993347168e-01),
            doubleArrayOf(-7.052240371704101562e+00, 6.436555480957031250e+01, -2.960794568061828613e-01),
            doubleArrayOf(-8.603390693664550781e+00, 6.436627960205078125e+01, -3.049058020114898682e-01),
            doubleArrayOf(-9.798856735229492188e+00, 6.425825500488281250e+01, -2.831823229789733887e-01),
            doubleArrayOf(-1.245050716400146484e+01, 6.405554199218750000e+01, -3.100046813488006592e-01),
            doubleArrayOf(-1.335690593719482422e+01, 6.408009338378906250e+01, -3.005590736865997314e-01),
            doubleArrayOf(-1.683587455749511719e+01, 6.373938369750976562e+01, -3.221777379512786865e-01),
            doubleArrayOf(-1.729688453674316406e+01, 6.378284072875976562e+01, -3.531102240085601807e-01),
            doubleArrayOf(-2.102521324157714844e+01, 6.402981567382812500e+01, -3.870390951633453369e-01),
            doubleArrayOf(-2.282489013671875000e+01, 6.406121826171875000e+01, -4.030127227306365967e-01),
            doubleArrayOf(-2.569993591308593750e+01, 6.418694305419921875e+01, -4.198628365993499756e-01),
            doubleArrayOf(-2.705007362365722656e+01, 6.413498687744140625e+01, -4.208978414535522461e-01),
            doubleArrayOf(-2.831891822814941406e+01, 6.414331054687500000e+01, -4.127450883388519287e-01),
            doubleArrayOf(-3.074782943725585938e+01, 6.406118774414062500e+01, -4.153230488300323486e-01),
            doubleArrayOf(-3.276730728149414062e+01, 6.398740005493164062e+01, -4.348095357418060303e-01),
            doubleArrayOf(-3.434489059448242188e+01, 6.385184860229492188e+01, -4.536561667919158936e-01),
            doubleArrayOf(-3.683744430541992188e+01, 6.360230636596679688e+01, -4.642134606838226318e-01),
            doubleArrayOf(-3.794100570678710938e+01, 6.340348434448242188e+01, -4.485477507114410400e-01),
            doubleArrayOf(-3.832019042968750000e+01, 6.271044540405273438e+01, -4.354268610477447510e-01),
            doubleArrayOf(-3.857348632812500000e+01, 6.111058425903320312e+01, -4.363748729228973389e-01),
            doubleArrayOf(-3.851559829711914062e+01, 5.916072463989257812e+01, -4.376887679100036621e-01),
            doubleArrayOf(-3.861024093627929688e+01, 5.722807693481445312e+01, -4.587515890598297119e-01),
            doubleArrayOf(-3.868551254272460938e+01, 5.517647933959960938e+01, -4.856172800064086914e-01),
            doubleArrayOf(-3.877112197875976562e+01, 5.329928970336914062e+01, -4.884334802627563477e-01),
            doubleArrayOf(-3.880211257934570312e+01, 5.127501296997070312e+01, -4.777226150035858154e-01),
            doubleArrayOf(-3.872105407714843750e+01, 4.930725097656250000e+01, -4.757617413997650146e-01),
            doubleArrayOf(-3.869613265991210938e+01, 4.752736282348632812e+01, -4.874720573425292969e-01),
            doubleArrayOf(-3.882011032104492188e+01, 4.538581466674804688e+01, -4.925082027912139893e-01),
            doubleArrayOf(-3.881344985961914062e+01, 4.388073348999023438e+01, -4.805255830287933350e-01),
            doubleArrayOf(-3.875130462646484375e+01, 4.158741378784179688e+01, -4.857944548130035400e-01),
            doubleArrayOf(-3.869169616699218750e+01, 3.941687011718750000e+01, -5.095214247703552246e-01),
            doubleArrayOf(-3.874463272094726562e+01, 3.739940261840820312e+01, -5.172543525695800781e-01),
            doubleArrayOf(-3.890749359130859375e+01, 3.515896224975585938e+01, -5.124457478523254395e-01),
            doubleArrayOf(-3.894717788696289062e+01, 3.321534347534179688e+01, -5.270505547523498535e-01),
            doubleArrayOf(-3.887821578979492188e+01, 3.110963630676269531e+01, -5.469065308570861816e-01),
            doubleArrayOf(-3.864091873168945312e+01, 2.899447822570800781e+01, -5.602553486824035645e-01),
            doubleArrayOf(-3.881159210205078125e+01, 2.673259353637695312e+01, -5.761530995368957520e-01),
            doubleArrayOf(-3.884503555297851562e+01, 2.457818222045898438e+01, -5.839658975601196289e-01),
            doubleArrayOf(-3.879595184326171875e+01, 2.283024978637695312e+01, -5.887326598167419434e-01),
            doubleArrayOf(-3.886396408081054688e+01, 2.065830993652343750e+01, -5.892921090126037598e-01),
            doubleArrayOf(-3.891389083862304688e+01, 1.868945693969726562e+01, -5.892916321754455566e-01),
            doubleArrayOf(-3.891336822509765625e+01, 1.682723999023437500e+01, -5.812461972236633301e-01),
            doubleArrayOf(-3.889277267456054688e+01, 1.470447921752929688e+01, -5.794101357460021973e-01),
            doubleArrayOf(-3.893107986450195312e+01, 1.292973613739013672e+01, -5.796772241592407227e-01),
            doubleArrayOf(-3.886268234252929688e+01, 1.077704620361328125e+01, -5.859072804450988770e-01),
            doubleArrayOf(-3.877273941040039062e+01, 8.793111801147460938e+00, -5.948902964591979980e-01),
            doubleArrayOf(-3.860669326782226562e+01, 6.969206809997558594e+00, -5.984954237937927246e-01),
            doubleArrayOf(-3.874256515502929688e+01, 5.148283004760742188e+00, -6.073819994926452637e-01),
            doubleArrayOf(-3.878296279907226562e+01, 3.600620508193969727e+00, -6.057188510894775391e-01),
            doubleArrayOf(-3.816177368164062500e+01, 2.052580595016479492e+00, -5.814106464385986328e-01),
            doubleArrayOf(-3.695568466186523438e+01, 1.115794539451599121e+00, -5.359543561935424805e-01),
            doubleArrayOf(-3.548904800415039062e+01, 6.021679043769836426e-01, -5.245763063430786133e-01),
            doubleArrayOf(-3.342282867431640625e+01, 1.589144468307495117e-01, -5.194635391235351562e-01),
            doubleArrayOf(-3.189625740051269531e+01, -1.030629947781562805e-01, -5.247492194175720215e-01),
            doubleArrayOf(-3.009060478210449219e+01, -1.996351182460784912e-01, -5.314942002296447754e-01),
            doubleArrayOf(-2.807547569274902344e+01, -2.673912346363067627e-01, -5.289375185966491699e-01),
            doubleArrayOf(-2.604535484313964844e+01, -4.709436297416687012e-01, -5.225706100463867188e-01),
            doubleArrayOf(-2.445805168151855469e+01, -4.687489271163940430e-01, -5.149136185646057129e-01),
            doubleArrayOf(-2.244910240173339844e+01, -5.672183036804199219e-01, -5.184385180473327637e-01),
            doubleArrayOf(-2.026822090148925781e+01, -5.864589810371398926e-01, -5.113167166709899902e-01),
            doubleArrayOf(-1.818496894836425781e+01, -7.274179458618164062e-01, -5.014081597328186035e-01),
            doubleArrayOf(-1.615794181823730469e+01, -8.162094354629516602e-01, -4.938409626483917236e-01),
            doubleArrayOf(-1.375029277801513672e+01, -9.019782543182373047e-01, -4.753522872924804688e-01),
            doubleArrayOf(-1.157090568542480469e+01, -9.341249465942382812e-01, -4.494744241237640381e-01),
            doubleArrayOf(-9.326683998107910156e+00, -9.559103250503540039e-01, -4.167839586734771729e-01),
            doubleArrayOf(-7.352933883666992188e+00, -1.188017964363098145e+00, -4.245388209819793701e-01),
            doubleArrayOf(-5.734455108642578125e+00, -1.153891444206237793e+00, -3.979718089103698730e-01),
            doubleArrayOf(-3.812616586685180664e+00, -9.329102039337158203e-01, -3.614951074123382568e-01),
            doubleArrayOf(-2.298931121826171875e+00, -6.136775016784667969e-01, -3.225914537906646729e-01),
            doubleArrayOf(-8.762195110321044922e-01, 3.853277117013931274e-02, -2.988288700580596924e-01),
            doubleArrayOf(3.893386572599411011e-02, 5.451951026916503906e-01, -2.552241384983062744e-01),
            doubleArrayOf(1.133222207427024841e-01, 1.579142212867736816e+00, -1.162233650684356689e-01),
            doubleArrayOf(1.620519459247589111e-01, 3.035715341567993164e+00, -1.488851308822631836e-01),
            doubleArrayOf(2.291360795497894287e-01, 4.860931396484375000e+00, -1.696106493473052979e-01),
            doubleArrayOf(2.926576435565948486e-01, 6.747178077697753906e+00, -1.844363212585449219e-01),
            doubleArrayOf(2.907011806964874268e-01, 8.123418807983398438e+00, -1.958947479724884033e-01),
            doubleArrayOf(2.287199795246124268e-01, 9.846700668334960938e+00, -1.576383709907531738e-01),
            doubleArrayOf(2.823902070522308350e-01, 1.186043453216552734e+01, -1.621845364570617676e-01),
            doubleArrayOf(2.741194069385528564e-01, 1.340247344970703125e+01, -1.680285334587097168e-01),
            doubleArrayOf(2.194572985172271729e-01, 1.540210437774658203e+01, -1.556498557329177856e-01),
            doubleArrayOf(1.663419306278228760e-01, 1.654062461853027344e+01, -1.402664631605148315e-01),
            doubleArrayOf(8.994200080633163452e-02, 1.818490600585937500e+01, -1.327063441276550293e-01),
            doubleArrayOf(6.514181941747665405e-02, 1.980974960327148438e+01, -1.445163339376449585e-01),
            doubleArrayOf(3.839161247014999390e-02, 2.179332351684570312e+01, -1.710619628429412842e-01),
            doubleArrayOf(-6.232954561710357666e-03, 2.399798583984375000e+01, -1.942412555217742920e-01),
            doubleArrayOf(6.346486508846282959e-03, 2.641883468627929688e+01, -2.134717404842376709e-01),
            doubleArrayOf(5.479358136653900146e-03, 2.809523773193359375e+01, -2.278532385826110840e-01),
            doubleArrayOf(1.520027965307235718e-02, 2.982795333862304688e+01, -2.370107024908065796e-01),
            doubleArrayOf(3.102888911962509155e-02, 3.119000244140625000e+01, -2.599991261959075928e-01),
            doubleArrayOf(-1.615474373102188110e-02, 3.344094085693359375e+01, -2.799768745899200439e-01),
            doubleArrayOf(-7.773754745721817017e-02, 3.592194747924804688e+01, -2.980414330959320068e-01),
            doubleArrayOf(-1.655865609645843506e-01, 3.719237136840820312e+01, -3.183965682983398438e-01),
            doubleArrayOf(-2.149877697229385376e-02, 3.933687973022460938e+01, -3.285890519618988037e-01),
            doubleArrayOf(-1.954769790172576904e-01, 4.181383895874023438e+01, -3.153688907623291016e-01),
            doubleArrayOf(-2.595208585262298584e-01, 4.333255767822265625e+01, -3.229863643646240234e-01),
            doubleArrayOf(-1.816367805004119873e-01, 4.516516494750976562e+01, -3.497449159622192383e-01),
            doubleArrayOf(-1.892558038234710693e-01, 4.719938278198242188e+01, -3.564981222152709961e-01),
            doubleArrayOf(-2.044521272182464600e-01, 4.860421371459960938e+01, -3.629803359508514404e-01),
            doubleArrayOf(-2.587248980998992920e-01, 5.092304229736328125e+01, -3.875782787799835205e-01),
            doubleArrayOf(-3.239890038967132568e-01, 5.212294769287109375e+01, -4.086132645606994629e-01),
            doubleArrayOf(-4.315975606441497803e-01, 5.507024765014648438e+01, -4.031623899936676025e-01),
            doubleArrayOf(-4.121792018413543701e-01, 5.660667037963867188e+01, -3.922605216503143311e-01),
            doubleArrayOf(-4.258759915828704834e-01, 5.839673995971679688e+01, -4.062815904617309570e-01),
            doubleArrayOf(-3.862406909465789795e-01, 5.962760162353515625e+01, -4.263590574264526367e-01),
            doubleArrayOf(-3.211984336376190186e-01, 6.125971221923828125e+01, -4.196084439754486084e-01),
            doubleArrayOf(-4.572063386440277100e-01, 6.267731857299804688e+01, -3.961188197135925293e-01),
            doubleArrayOf(4.154671728610992432e-01, 6.303064346313476562e+01, -3.317232429981231689e-01),
            doubleArrayOf(-2.570153713226318359e+00, 6.429341125488281250e+01, -2.588575184345245361e-01),
            doubleArrayOf(-5.374518871307373047e+00, 6.423333740234375000e+01, -2.467235028743743896e-01),
            doubleArrayOf(-3.881719112396240234e+00, 6.433840179443359375e+01, -2.749037444591522217e-01),
            doubleArrayOf(-7.268023014068603516e+00, 6.415431976318359375e+01, -3.002992570400238037e-01),
            doubleArrayOf(-7.791897773742675781e+00, 6.429446411132812500e+01, -2.763537168502807617e-01),
            doubleArrayOf(-8.014906883239746094e+00, 6.415301513671875000e+01, -2.395770251750946045e-01),
            doubleArrayOf(-9.787150382995605469e+00, 6.422702789306640625e+01, -2.563214600086212158e-01),
            doubleArrayOf(-1.685314750671386719e+01, 6.390804672241210938e+01, -3.263612687587738037e-01),
            doubleArrayOf(-1.490875911712646484e+01, 6.384982681274414062e+01, -3.181850612163543701e-01),
            doubleArrayOf(-1.277108860015869141e+01, 6.404862213134765625e+01, -3.615875244140625000e-01),
            doubleArrayOf(-1.791134834289550781e+01, 6.384486770629882812e+01, -3.389746546745300293e-01),
            doubleArrayOf(-2.273546981811523438e+01, 6.409049987792968750e+01, -4.108845293521881104e-01),
            doubleArrayOf(-2.513915824890136719e+01, 6.414715576171875000e+01, -4.137820899486541748e-01),
            doubleArrayOf(-2.608187675476074219e+01, 6.411805725097656250e+01, -4.131034910678863525e-01),
            doubleArrayOf(-2.834959411621093750e+01, 6.410771942138671875e+01, -4.150671660900115967e-01),
            doubleArrayOf(-3.045933914184570312e+01, 6.401743316650390625e+01, -4.201205372810363770e-01),
            doubleArrayOf(-3.137981986999511719e+01, 6.408879089355468750e+01, -4.194082915782928467e-01),
            doubleArrayOf(-3.328634262084960938e+01, 6.412002563476562500e+01, -4.573058187961578369e-01),
            doubleArrayOf(-3.536672592163085938e+01, 6.386214828491210938e+01, -4.694142639636993408e-01),
            doubleArrayOf(-3.780478286743164062e+01, 6.337381744384765625e+01, -4.539872705936431885e-01),
            doubleArrayOf(-3.815063858032226562e+01, 6.315550613403320312e+01, -4.422446191310882568e-01),
            doubleArrayOf(-3.851746749877929688e+01, 6.118040084838867188e+01, -4.357223808765411377e-01),
            doubleArrayOf(-3.860223770141601562e+01, 6.011761856079101562e+01, -4.369417130947113037e-01),
            doubleArrayOf(-3.868144607543945312e+01, 5.693380355834960938e+01, -4.634427428245544434e-01),
            doubleArrayOf(-3.869392776489257812e+01, 5.560049057006835938e+01, -4.809370934963226318e-01),
            doubleArrayOf(-3.875109100341796875e+01, 5.411105728149414062e+01, -4.883439242839813232e-01),
            doubleArrayOf(-3.873479843139648438e+01, 5.179137802124023438e+01, -4.790588319301605225e-01),
            doubleArrayOf(-3.882854843139648438e+01, 5.038253021240234375e+01, -4.740022420883178711e-01),
            doubleArrayOf(-3.868903732299804688e+01, 4.920833969116210938e+01, -4.747207760810852051e-01),
            doubleArrayOf(-3.872306060791015625e+01, 4.687900161743164062e+01, -4.884352982044219971e-01),
            doubleArrayOf(-3.874614715576171875e+01, 4.476008224487304688e+01, -4.957379400730133057e-01),
            doubleArrayOf(-3.872899246215820312e+01, 4.252561187744140625e+01, -4.802651107311248779e-01),
            doubleArrayOf(-3.873180770874023438e+01, 3.991368484497070312e+01, -4.980700314044952393e-01),
            doubleArrayOf(-3.876189422607421875e+01, 3.846513748168945312e+01, -5.088563561439514160e-01),
            doubleArrayOf(-3.870022201538085938e+01, 3.741365432739257812e+01, -5.107846856117248535e-01),
            doubleArrayOf(-3.889358901977539062e+01, 3.545755767822265625e+01, -5.114461183547973633e-01),
            doubleArrayOf(-3.876113510131835938e+01, 3.290586471557617188e+01, -5.301787257194519043e-01),
            doubleArrayOf(-3.882830429077148438e+01, 3.085083770751953125e+01, -5.481487512588500977e-01),
            doubleArrayOf(-3.872072982788085938e+01, 2.856037712097167969e+01, -5.618434548377990723e-01),
            doubleArrayOf(-3.845513153076171875e+01, 2.635366058349609375e+01, -5.677091479301452637e-01),
            doubleArrayOf(-3.832283401489257812e+01, 2.490446853637695312e+01, -5.731409192085266113e-01),
            doubleArrayOf(-3.867595291137695312e+01, 2.385407257080078125e+01, -5.825542807579040527e-01),
            doubleArrayOf(-3.888783645629882812e+01, 2.090595626831054688e+01, -5.878471732139587402e-01),
            doubleArrayOf(-3.892000961303710938e+01, 1.968887329101562500e+01, -5.889488458633422852e-01),
            doubleArrayOf(-3.892845153808593750e+01, 1.887409591674804688e+01, -5.886656045913696289e-01),
            doubleArrayOf(-3.887804031372070312e+01, 1.600623703002929688e+01, -5.828610658645629883e-01),
            doubleArrayOf(-3.893359375000000000e+01, 1.385896873474121094e+01, -5.758720040321350098e-01),
            doubleArrayOf(-3.896747589111328125e+01, 1.193794059753417969e+01, -5.778188109397888184e-01),
            doubleArrayOf(-3.884586334228515625e+01, 1.073544120788574219e+01, -5.884563326835632324e-01),
            doubleArrayOf(-3.863448715209960938e+01, 8.161215782165527344e+00, -5.924142599105834961e-01),
            doubleArrayOf(-3.870139694213867188e+01, 6.275544166564941406e+00, -6.068414449691772461e-01),
            doubleArrayOf(-3.877487182617187500e+01, 5.436120986938476562e+00, -6.131760478019714355e-01),
            doubleArrayOf(-3.881972885131835938e+01, 4.461328506469726562e+00, -6.060269474983215332e-01),
            doubleArrayOf(-3.841761398315429688e+01, 2.497795343399047852e+00, -5.957226753234863281e-01),
            doubleArrayOf(-3.740311813354492188e+01, 1.289652347564697266e+00, -5.508714914321899414e-01),
            doubleArrayOf(-3.635687637329101562e+01, 8.997370004653930664e-01, -5.311580300331115723e-01),
            doubleArrayOf(-3.415916824340820312e+01, 2.407621741294860840e-01, -5.173518061637878418e-01),
            doubleArrayOf(-3.256631088256835938e+01, -9.601004421710968018e-03, -5.226033329963684082e-01),
            doubleArrayOf(-3.058169174194335938e+01, -2.580502927303314209e-01, -5.277736783027648926e-01),
            doubleArrayOf(-2.870814132690429688e+01, -2.499867379665374756e-01, -5.299665331840515137e-01),
            doubleArrayOf(-2.719706535339355469e+01, -4.036541283130645752e-01, -5.247447490692138672e-01),
            doubleArrayOf(-2.465253257751464844e+01, -3.947901129722595215e-01, -5.199503302574157715e-01),
            doubleArrayOf(-2.432739830017089844e+01, -5.097557902336120605e-01, -5.161819458007812500e-01),
            doubleArrayOf(-2.014428138732910156e+01, -5.340626239776611328e-01, -5.101770758628845215e-01),
            doubleArrayOf(-1.921662330627441406e+01, -6.530014276504516602e-01, -5.060064792633056641e-01),
            doubleArrayOf(-1.554977035522460938e+01, -8.445804119110107422e-01, -4.862451553344726562e-01),
            doubleArrayOf(-1.443859386444091797e+01, -9.450291395187377930e-01, -4.806874096393585205e-01),
            doubleArrayOf(-1.191788196563720703e+01, -9.828150272369384766e-01, -4.567549824714660645e-01),
            doubleArrayOf(-1.056320285797119141e+01, -9.597401618957519531e-01, -4.408622086048126221e-01),
            doubleArrayOf(-9.066366195678710938e+00, -1.028915166854858398e+00, -4.185365736484527588e-01),
            doubleArrayOf(-7.172395229339599609e+00, -1.159829139709472656e+00, -4.163611531257629395e-01),
            doubleArrayOf(-6.282975196838378906e+00, -1.152047514915466309e+00, -3.985844254493713379e-01),
            doubleArrayOf(-3.955487489700317383e+00, -8.883081674575805664e-01, -3.552128374576568604e-01),
            doubleArrayOf(-3.572209119796752930e+00, -8.750792741775512695e-01, -3.431895375251770020e-01),
            doubleArrayOf(-1.216908454895019531e+00, -2.325420081615447998e-01, -2.993132472038269043e-01),
            doubleArrayOf(3.488150984048843384e-02, 2.642617523670196533e-01, -1.641350090503692627e-01),
            doubleArrayOf(1.165604814887046814e-01, 2.646774351596832275e-01, 1.868599280714988708e-02)
        )
        val angleSet = listOf(
            doubleArrayOf(6.796090602874755859e-01, -7.240556478500366211e-01, 8.295311778783798218e-02, -6.597088277339935303e-02),
            doubleArrayOf(7.134441137313842773e-01, -7.073965072631835938e-01, -8.794320747256278992e-04, 7.216485217213630676e-03),
            doubleArrayOf(6.021931767463684082e-01, -7.901616096496582031e-01, -7.579316943883895874e-02, 7.390736043453216553e-02),
            doubleArrayOf(6.726224422454833984e-01, -7.126053571701049805e-01, 1.873425245285034180e-01, -1.452109664678573608e-01),
            doubleArrayOf(7.260180711746215820e-01, -6.963607668876647949e-01, 1.588045433163642883e-02, 1.059912331402301788e-02),
            doubleArrayOf(6.063887476921081543e-01, -7.816367745399475098e-01, -7.088626176118850708e-02, 7.116618752479553223e-02),
            doubleArrayOf(6.335789561271667480e-01, -7.341657280921936035e-01, 2.238556295633316040e-01, -1.724472194910049438e-01),
            doubleArrayOf(7.000988125801086426e-01, -7.484167218208312988e-01, 2.366404607892036438e-02, -1.199673861265182495e-04),
            doubleArrayOf(6.742324829101562500e-01, -7.553651928901672363e-01, 3.393170610070228577e-02, -2.397226355969905853e-02),
            doubleArrayOf(6.879624724388122559e-01, -7.382965683937072754e-01, 1.387218106538057327e-02, 5.428718402981758118e-03),
            doubleArrayOf(6.970057487487792969e-01, -7.245130538940429688e-01, 8.287523873150348663e-03, 3.797279670834541321e-03),
            doubleArrayOf(7.037615180015563965e-01, -7.245697379112243652e-01, 1.252456475049257278e-02, -4.806723445653915405e-04),
            doubleArrayOf(6.925261020660400391e-01, -7.492380142211914062e-01, 1.244028098881244659e-03, 5.816696211695671082e-03),
            doubleArrayOf(6.975438594818115234e-01, -7.253163456916809082e-01, 8.305360563099384308e-03, -6.195476278662681580e-03),
            doubleArrayOf(6.954950094223022461e-01, -7.378707528114318848e-01, 9.515796788036823273e-03, -2.841783687472343445e-03),
            doubleArrayOf(7.055084705352783203e-01, -7.202958464622497559e-01, 1.850296743214130402e-03, 5.185836926102638245e-03),
            doubleArrayOf(7.074444293975830078e-01, -7.148454785346984863e-01, -1.532132737338542938e-03, 3.630997613072395325e-03),
            doubleArrayOf(6.965708732604980469e-01, -7.192603349685668945e-01, 6.420721299946308136e-03, -3.924949094653129578e-03),
            doubleArrayOf(6.906473040580749512e-01, -7.153931856155395508e-01, 9.144340641796588898e-03, -2.162976190447807312e-03),
            doubleArrayOf(6.974899768829345703e-01, -7.196550965309143066e-01, 1.101696956902742386e-02, -4.938846454024314880e-03),
            doubleArrayOf(6.926519274711608887e-01, -7.189732193946838379e-01, 1.710378006100654602e-02, -5.922606214880943298e-03),
            doubleArrayOf(6.940667629241943359e-01, -7.202776670455932617e-01, 1.514217723160982132e-02, -3.665214404463768005e-03),
            doubleArrayOf(6.961290240287780762e-01, -7.183620929718017578e-01, 1.954839006066322327e-02, -1.438273116946220398e-03),
            doubleArrayOf(6.989403367042541504e-01, -7.139992713928222656e-01, 2.314922586083412170e-02, -2.608578652143478394e-04),
            doubleArrayOf(7.065244913101196289e-01, -7.163119912147521973e-01, 2.569264546036720276e-02, 6.392318755388259888e-04),
            doubleArrayOf(7.036672234535217285e-01, -7.082468867301940918e-01, 1.580417528748512268e-02, 5.771787837147712708e-03),
            doubleArrayOf(7.045114040374755859e-01, -7.171156406402587891e-01, 9.830539114773273468e-03, 3.431858494877815247e-03),
            doubleArrayOf(6.955263018608093262e-01, -7.342500090599060059e-01, 8.490835316479206085e-03, 6.098480895161628723e-03),
            doubleArrayOf(7.052227854728698730e-01, -7.280948758125305176e-01, 2.318156138062477112e-02, -1.159420423209667206e-02),
            doubleArrayOf(7.056857347488403320e-01, -7.127158045768737793e-01, 3.091165795922279358e-02, -2.515908889472484589e-02),
            doubleArrayOf(7.001672387123107910e-01, -7.119060158729553223e-01, 2.633247151970863342e-02, -2.015858702361583710e-02),
            doubleArrayOf(6.958435177803039551e-01, -7.175819277763366699e-01, 3.435320034623146057e-02, -2.558836154639720917e-02),
            doubleArrayOf(6.900246143341064453e-01, -7.216878533363342285e-01, 1.969623938202857971e-02, -1.237746886909008026e-02),
            doubleArrayOf(7.012581825256347656e-01, -7.226966619491577148e-01, 9.972636587917804718e-03, -1.325814053416252136e-03),
            doubleArrayOf(7.007044553756713867e-01, -7.144402861595153809e-01, 1.099840272217988968e-02, 4.039080813527107239e-03),
            doubleArrayOf(6.973513960838317871e-01, -7.177138328552246094e-01, 7.870708592236042023e-03, 9.153665974736213684e-03),
            doubleArrayOf(6.955493688583374023e-01, -7.169128656387329102e-01, 1.652503386139869690e-02, 3.105165436863899231e-03),
            doubleArrayOf(7.063584327697753906e-01, -7.136015892028808594e-01, 2.795604243874549866e-02, -5.592701956629753113e-03),
            doubleArrayOf(6.991564035415649414e-01, -7.249878644943237305e-01, 3.585452213883399963e-02, -6.783900782465934753e-03),
            doubleArrayOf(6.980280280113220215e-01, -7.205244302749633789e-01, 3.109902516007423401e-02, -2.119420096278190613e-03),
            doubleArrayOf(6.954467296600341797e-01, -6.915747523307800293e-01, 6.221477873623371124e-03, 1.637536473572254181e-02),
            doubleArrayOf(6.751530170440673828e-01, -6.731567978858947754e-01, -1.883872747421264648e-01, 1.883159279823303223e-01),
            doubleArrayOf(3.704472482204437256e-01, -3.829703629016876221e-01, -2.813794016838073730e-01, 3.851941823959350586e-01),
            doubleArrayOf(2.657281756401062012e-01, -2.538389861583709717e-01, -2.378230690956115723e-01, 2.411780953407287598e-01),
            doubleArrayOf(-3.205893337726593018e-01, 3.371489048004150391e-01, 3.700927495956420898e-01, -3.548443913459777832e-01),
            doubleArrayOf(3.655248284339904785e-01, -3.878429234027862549e-01, -3.692385554313659668e-01, 3.676774501800537109e-01),
            doubleArrayOf(4.208746552467346191e-01, -4.432317614555358887e-01, -4.260939657688140869e-01, 4.450659155845642090e-01),
            doubleArrayOf(2.158015072345733643e-01, -2.219637483358383179e-01, -2.245853841304779053e-01, 2.595484256744384766e-01),
            doubleArrayOf(-5.327405780553817749e-02, 5.642457678914070129e-02, 1.801953315734863281e-01, -1.344870328903198242e-01),
            doubleArrayOf(-4.883582592010498047e-01, 5.404068827629089355e-01, 5.435274243354797363e-01, -5.151277780532836914e-01),
            doubleArrayOf(-3.781206011772155762e-01, 4.037953615188598633e-01, 4.430135190486907959e-01, -4.171454310417175293e-01),
            doubleArrayOf(-6.013745665550231934e-01, 6.505838036537170410e-01, 6.354333162307739258e-01, -6.208168864250183105e-01),
            doubleArrayOf(-3.793844878673553467e-01, 4.106071889400482178e-01, 4.065117835998535156e-01, -3.737120032310485840e-01),
            doubleArrayOf(-3.903739452362060547e-01, 4.202061891555786133e-01, 3.960557878017425537e-01, -3.675488233566284180e-01),
            doubleArrayOf(-4.012141823768615723e-01, 4.275424480438232422e-01, 4.159787297248840332e-01, -3.998632133007049561e-01),
            doubleArrayOf(-4.601786136627197266e-01, 4.838983416557312012e-01, 4.913767576217651367e-01, -4.872246086597442627e-01),
            doubleArrayOf(-3.608185052871704102e-01, 3.813285529613494873e-01, 3.892188072204589844e-01, -3.652040958404541016e-01),
            doubleArrayOf(-3.014562129974365234e-01, 3.204522430896759033e-01, 3.181059062480926514e-01, -3.084718286991119385e-01),
            doubleArrayOf(-4.114313721656799316e-01, 4.424759447574615479e-01, 4.169976413249969482e-01, -3.942483067512512207e-01),
            doubleArrayOf(-5.195367336273193359e-01, 5.465019941329956055e-01, 5.910558104515075684e-01, -5.768845677375793457e-01),
            doubleArrayOf(1.978379189968109131e-01, -2.437286823987960815e-01, -1.656422615051269531e-01, 1.352786123752593994e-01),
            doubleArrayOf(-5.121238529682159424e-03, -2.338327094912528992e-02, 3.189704418182373047e-01, -3.171314597129821777e-01),
            doubleArrayOf(-1.012764349579811096e-01, 9.441725909709930420e-02, 7.093502879142761230e-01, -6.717726588249206543e-01),
            doubleArrayOf(-2.024598419666290283e-03, 2.180980518460273743e-02, 7.688078880310058594e-01, -7.162445783615112305e-01),
            doubleArrayOf(2.206658571958541870e-02, -4.381742328405380249e-03, 7.739423513412475586e-01, -7.277074456214904785e-01),
            doubleArrayOf(7.014207541942596436e-03, -7.233049720525741577e-03, 7.600891590118408203e-01, -7.119634151458740234e-01),
            doubleArrayOf(4.178099334239959717e-03, -7.857184857130050659e-03, 7.444409728050231934e-01, -6.938151121139526367e-01),
            doubleArrayOf(1.203333586454391479e-02, -1.447407528758049011e-02, 7.649957537651062012e-01, -7.099990844726562500e-01),
            doubleArrayOf(1.469969004392623901e-02, -1.018835231661796570e-02, 7.668939232826232910e-01, -7.168263792991638184e-01),
            doubleArrayOf(1.262395828962326050e-02, -6.414663046598434448e-03, 7.510727047920227051e-01, -7.104192376136779785e-01),
            doubleArrayOf(2.325009554624557495e-02, -1.494344696402549744e-02, 7.314386963844299316e-01, -6.940172314643859863e-01),
            doubleArrayOf(1.134549826383590698e-02, -2.264034003019332886e-03, 7.575806975364685059e-01, -7.291343212127685547e-01),
            doubleArrayOf(1.938330382108688354e-02, -1.211173459887504578e-02, 7.451133131980895996e-01, -7.151255011558532715e-01),
            doubleArrayOf(2.125024050474166870e-02, -3.911387175321578979e-03, 7.288970351219177246e-01, -7.028159499168395996e-01),
            doubleArrayOf(2.005784958600997925e-02, 2.354610711336135864e-03, 7.434888482093811035e-01, -7.078377008438110352e-01),
            doubleArrayOf(1.126103848218917847e-02, 3.153298050165176392e-03, 7.363044619560241699e-01, -7.043324112892150879e-01),
            doubleArrayOf(2.918773144483566284e-02, -1.154340431094169617e-02, 7.317882180213928223e-01, -7.036910653114318848e-01),
            doubleArrayOf(1.909124106168746948e-02, 1.460898667573928833e-03, 7.062113285064697266e-01, -6.887577176094055176e-01),
            doubleArrayOf(1.974015682935714722e-02, -3.699176013469696045e-04, 7.192663550376892090e-01, -6.934307217597961426e-01),
            doubleArrayOf(1.519786566495895386e-02, -5.685281008481979370e-03, 7.362228631973266602e-01, -7.009356021881103516e-01),
            doubleArrayOf(8.492104709148406982e-03, -2.457611262798309326e-04, 7.469878792762756348e-01, -7.136545181274414062e-01),
            doubleArrayOf(7.972709834575653076e-03, 1.161683350801467896e-03, 7.448484897613525391e-01, -7.119317054748535156e-01),
            doubleArrayOf(1.196693629026412964e-02, 3.810692578554153442e-03, 7.274897694587707520e-01, -6.901082396507263184e-01),
            doubleArrayOf(4.426531493663787842e-03, 1.306544616818428040e-02, 7.432016134262084961e-01, -7.147042155265808105e-01),
            doubleArrayOf(6.247870624065399170e-03, 5.743939429521560669e-03, 7.309978008270263672e-01, -7.031388878822326660e-01),
            doubleArrayOf(1.418720930814743042e-02, 4.892278462648391724e-03, 7.216634750366210938e-01, -6.907574534416198730e-01),
            doubleArrayOf(-1.777643710374832153e-02, 3.285144641995429993e-02, 7.242360711097717285e-01, -7.043936848640441895e-01),
            doubleArrayOf(-9.377069771289825439e-03, 2.889629080891609192e-02, 7.347382903099060059e-01, -6.982592344284057617e-01),
            doubleArrayOf(6.876759231090545654e-03, 1.827632263302803040e-02, 7.369132637977600098e-01, -7.066609263420104980e-01),
            doubleArrayOf(-1.562900841236114502e-03, 2.416004613041877747e-02, 7.408018708229064941e-01, -7.048497796058654785e-01),
            doubleArrayOf(7.668249309062957764e-03, 1.178442314267158508e-02, 7.440149188041687012e-01, -7.044294476509094238e-01),
            doubleArrayOf(-5.036719143390655518e-03, 1.350419595837593079e-02, 7.366539835929870605e-01, -7.092760205268859863e-01),
            doubleArrayOf(7.531105726957321167e-02, -7.501043379306793213e-02, 7.298006415367126465e-01, -7.039663791656494141e-01),
            doubleArrayOf(1.980409622192382812e-01, -1.972326785326004028e-01, 7.023716568946838379e-01, -6.759750247001647949e-01),
            doubleArrayOf(3.740484118461608887e-01, -3.918292522430419922e-01, 6.124905943870544434e-01, -5.781722664833068848e-01),
            doubleArrayOf(4.372454881668090820e-01, -4.596382081508636475e-01, 5.673296451568603516e-01, -5.288341045379638672e-01),
            doubleArrayOf(4.685997962951660156e-01, -4.924774169921875000e-01, 5.358369350433349609e-01, -4.986171722412109375e-01),
            doubleArrayOf(4.631860256195068359e-01, -4.882096946239471436e-01, 5.318849682807922363e-01, -4.991917610168457031e-01),
            doubleArrayOf(4.711921215057373047e-01, -4.941197037696838379e-01, 5.209514498710632324e-01, -4.847876131534576416e-01),
            doubleArrayOf(4.752263426780700684e-01, -4.950412213802337646e-01, 5.243079066276550293e-01, -4.889424443244934082e-01),
            doubleArrayOf(4.765659570693969727e-01, -4.980979263782501221e-01, 5.155505537986755371e-01, -4.849811196327209473e-01),
            doubleArrayOf(4.788798093795776367e-01, -4.966451525688171387e-01, 5.126830935478210449e-01, -4.818811416625976562e-01),
            doubleArrayOf(4.856852889060974121e-01, -4.989902377128601074e-01, 5.131008625030517578e-01, -4.794065356254577637e-01),
            doubleArrayOf(4.775016307830810547e-01, -4.863096475601196289e-01, 5.240154266357421875e-01, -4.872943162918090820e-01),
            doubleArrayOf(4.768138825893402100e-01, -4.933684468269348145e-01, 5.239334702491760254e-01, -4.870055913925170898e-01),
            doubleArrayOf(4.855427145957946777e-01, -5.075727701187133789e-01, 5.232162475585937500e-01, -4.791159629821777344e-01),
            doubleArrayOf(4.766182601451873779e-01, -4.990234375000000000e-01, 5.333205461502075195e-01, -4.887064099311828613e-01),
            doubleArrayOf(4.769194424152374268e-01, -4.886846840381622314e-01, 5.378336310386657715e-01, -4.990525245666503906e-01),
            doubleArrayOf(4.730200469493865967e-01, -4.778991937637329102e-01, 5.386309027671813965e-01, -5.058412551879882812e-01),
            doubleArrayOf(4.947184920310974121e-01, -5.073191523551940918e-01, 5.157425403594970703e-01, -4.786883592605590820e-01),
            doubleArrayOf(5.061986446380615234e-01, -5.221825242042541504e-01, 5.066551566123962402e-01, -4.644117355346679688e-01),
            doubleArrayOf(5.133911967277526855e-01, -5.315909981727600098e-01, 4.945545196533203125e-01, -4.520751237869262695e-01),
            doubleArrayOf(5.489060878753662109e-01, -5.564036965370178223e-01, 4.437885880470275879e-01, -4.242175519466400146e-01),
            doubleArrayOf(6.114568114280700684e-01, -6.306397318840026855e-01, 3.277228772640228271e-01, -3.280712664127349854e-01),
            doubleArrayOf(6.821562647819519043e-01, -7.178909182548522949e-01, 1.331304162740707397e-01, -1.275762915611267090e-01),
            doubleArrayOf(6.808590888977050781e-01, -7.117452025413513184e-01, 2.536218240857124329e-02, -8.014259859919548035e-03),
            doubleArrayOf(6.930251121520996094e-01, -7.284496426582336426e-01, 4.936997778713703156e-03, 8.003065362572669983e-03),
            doubleArrayOf(6.971462965011596680e-01, -7.174880504608154297e-01, 9.283159859478473663e-03, 8.939821273088455200e-04),
            doubleArrayOf(7.007068991661071777e-01, -7.243291139602661133e-01, 1.187766063958406448e-02, -2.498906105756759644e-04),
            doubleArrayOf(6.859578490257263184e-01, -7.169666886329650879e-01, -1.699338667094707489e-03, -6.635542958974838257e-04),
            doubleArrayOf(6.990131735801696777e-01, -7.165205478668212891e-01, 8.108277805149555206e-03, -7.164748385548591614e-03),
            doubleArrayOf(7.179288864135742188e-01, -6.905530095100402832e-01, 1.817796006798744202e-02, -1.162852160632610321e-02),
            doubleArrayOf(7.256625890731811523e-01, -6.894238591194152832e-01, 7.354070432484149933e-03, -5.907116457819938660e-03),
            doubleArrayOf(7.107412219047546387e-01, -6.984750628471374512e-01, -7.450385019183158875e-04, 1.959944143891334534e-03),
            doubleArrayOf(7.005293369293212891e-01, -7.040249705314636230e-01, 2.663453109562397003e-03, -7.858183234930038452e-04),
            doubleArrayOf(6.921628713607788086e-01, -7.094563841819763184e-01, 8.929436095058917999e-03, -3.087302669882774353e-03),
            doubleArrayOf(6.943452954292297363e-01, -7.152946591377258301e-01, 8.356009609997272491e-03, -2.534044906497001648e-03),
            doubleArrayOf(6.959993839263916016e-01, -7.183991074562072754e-01, 1.473856437951326370e-02, -5.321858450770378113e-03),
            doubleArrayOf(6.917347908020019531e-01, -7.230042815208435059e-01, 1.862244680523872375e-02, -5.843123421072959900e-03),
            doubleArrayOf(6.926132440567016602e-01, -7.190079092979431152e-01, 1.900655403733253479e-02, -1.915989443659782410e-03),
            doubleArrayOf(6.940765380859375000e-01, -7.161145210266113281e-01, 2.598339691758155823e-02, -2.962676808238029480e-03),
            doubleArrayOf(7.026988267898559570e-01, -7.147901058197021484e-01, 2.424979582428932190e-02, 4.138816148042678833e-04),
            doubleArrayOf(7.043171525001525879e-01, -7.131083011627197266e-01, 1.831859722733497620e-02, 6.971377879381179810e-04),
            doubleArrayOf(7.061891555786132812e-01, -7.130337953567504883e-01, 1.298705209046602249e-02, 6.740750744938850403e-03),
            doubleArrayOf(7.003822922706604004e-01, -7.211069464683532715e-01, 1.478505600243806839e-02, -2.264289185404777527e-03),
            doubleArrayOf(6.847990751266479492e-01, -7.203853726387023926e-01, 1.148537266999483109e-02, -2.852616831660270691e-03),
            doubleArrayOf(7.112298011779785156e-01, -7.222454547882080078e-01, 2.988940849900245667e-02, -2.388721518218517303e-02),
            doubleArrayOf(7.025183439254760742e-01, -7.131002545356750488e-01, 2.628186717629432678e-02, -2.144110016524791718e-02),
            doubleArrayOf(6.962205171585083008e-01, -7.132139801979064941e-01, 3.558251634240150452e-02, -2.683451585471630096e-02),
            doubleArrayOf(6.935420036315917969e-01, -7.230598926544189453e-01, 2.501914277672767639e-02, -1.664557866752147675e-02),
            doubleArrayOf(6.931240558624267578e-01, -7.259535193443298340e-01, 9.542887099087238312e-03, -3.385750576853752136e-03),
            doubleArrayOf(7.012501358985900879e-01, -7.199139595031738281e-01, 1.122099626809358597e-02, -1.394568011164665222e-03),
            doubleArrayOf(6.975058317184448242e-01, -7.085266113281250000e-01, 1.132047642022371292e-02, 5.366029217839241028e-03),
            doubleArrayOf(6.968368291854858398e-01, -7.113254070281982422e-01, 4.253153689205646515e-03, 1.064229197800159454e-02),
            doubleArrayOf(6.926407814025878906e-01, -7.114674448966979980e-01, 2.020690217614173889e-02, -2.087591215968132019e-03),
            doubleArrayOf(7.023986577987670898e-01, -7.136470079421997070e-01, 2.907497063279151917e-02, -4.818318411707878113e-03),
            doubleArrayOf(6.965053081512451172e-01, -7.254133224487304688e-01, 3.768033161759376526e-02, -8.169827982783317566e-03),
            doubleArrayOf(6.939357519149780273e-01, -7.224355340003967285e-01, 4.012519493699073792e-02, -1.010066084563732147e-02),
            doubleArrayOf(6.913201808929443359e-01, -7.033112049102783203e-01, 4.932219162583351135e-02, -2.218347601592540741e-02),
            doubleArrayOf(7.029687166213989258e-01, -6.928831338882446289e-01, -7.563268393278121948e-02, 8.858686685562133789e-02),
            doubleArrayOf(5.729122757911682129e-01, -5.833317637443542480e-01, -3.764078617095947266e-01, 4.716799855232238770e-01),
            doubleArrayOf(2.499129474163055420e-01, -2.552536427974700928e-01, -1.801181435585021973e-01, 2.095764279365539551e-01),
            doubleArrayOf(-7.557589560747146606e-02, 1.020259559154510498e-01, 1.150003746151924133e-01, -9.940451383590698242e-02),
            doubleArrayOf(-5.581478029489517212e-02, 6.729353964328765869e-02, 1.234259679913520813e-01, -1.180345416069030762e-01),
            doubleArrayOf(5.392794609069824219e-01, -5.812324881553649902e-01, -5.342532992362976074e-01, 5.386888384819030762e-01),
            doubleArrayOf(3.415313363075256348e-01, -3.615160286426544189e-01, -3.713135421276092529e-01, 3.794754743576049805e-01),
            doubleArrayOf(1.769555211067199707e-01, -1.752360910177230835e-01, -1.633250117301940918e-01, 1.798305511474609375e-01),
            doubleArrayOf(-8.172105997800827026e-02, 9.339883923530578613e-02, 9.078619629144668579e-02, -6.888210773468017578e-02),
            doubleArrayOf(-5.352016091346740723e-01, 5.888187289237976074e-01, 5.620316267013549805e-01, -5.256330966949462891e-01),
            doubleArrayOf(-3.904966413974761963e-01, 4.208097159862518311e-01, 4.670354723930358887e-01, -4.436094164848327637e-01),
            doubleArrayOf(-6.766459941864013672e-01, 7.079179286956787109e-01, 6.865027546882629395e-01, -6.812621951103210449e-01),
            doubleArrayOf(-5.313280820846557617e-01, 5.645106434822082520e-01, 5.563406348228454590e-01, -5.353719592094421387e-01),
            doubleArrayOf(-3.960485160350799561e-01, 4.307343065738677979e-01, 4.376399815082550049e-01, -3.944774270057678223e-01),
            doubleArrayOf(-3.810627460479736328e-01, 4.016737639904022217e-01, 4.040793776512145996e-01, -3.868066370487213135e-01),
            doubleArrayOf(-4.914457798004150391e-01, 5.151385068893432617e-01, 5.436759591102600098e-01, -5.313997268676757812e-01),
            doubleArrayOf(-4.036439359188079834e-01, 4.287629425525665283e-01, 4.343255162239074707e-01, -4.134875535964965820e-01),
            doubleArrayOf(-2.766186594963073730e-01, 2.798401713371276855e-01, 2.842962145805358887e-01, -2.687920331954956055e-01),
            doubleArrayOf(-2.782008349895477295e-01, 2.987441122531890869e-01, 2.502762079238891602e-01, -2.387151122093200684e-01),
            doubleArrayOf(-3.514703512191772461e-01, 3.658117055892944336e-01, 2.961144447326660156e-01, -2.919757962226867676e-01),
            doubleArrayOf(-3.230799436569213867e-01, 3.428834080696105957e-01, 4.567545056343078613e-01, -4.441693723201751709e-01),
            doubleArrayOf(5.032440274953842163e-02, -7.539297640323638916e-02, 1.806254386901855469e-01, -1.890162527561187744e-01),
            doubleArrayOf(-8.565587550401687622e-02, 6.485970318317413330e-02, 5.330063104629516602e-01, -5.133271217346191406e-01),
            doubleArrayOf(-9.355731308460235596e-03, 2.622236683964729309e-02, 7.496502995491027832e-01, -6.997393369674682617e-01),
            doubleArrayOf(1.328223198652267456e-02, 6.290603429079055786e-03, 7.771182060241699219e-01, -7.316752672195434570e-01),
            doubleArrayOf(3.949992358684539795e-03, -4.895877093076705933e-03, 7.769764661788940430e-01, -7.271577715873718262e-01),
            doubleArrayOf(3.756754100322723389e-03, -4.842367023229598999e-03, 7.599194049835205078e-01, -7.099275588989257812e-01),
            doubleArrayOf(7.253639400005340576e-03, -1.016567274928092957e-02, 7.526494860649108887e-01, -6.998013854026794434e-01),
            doubleArrayOf(3.727011382579803467e-03, 1.944411545991897583e-03, 7.617391943931579590e-01, -7.130479216575622559e-01),
            doubleArrayOf(8.026890456676483154e-03, -9.844414889812469482e-04, 7.708367705345153809e-01, -7.241953611373901367e-01),
            doubleArrayOf(6.386034190654754639e-03, 5.622990429401397705e-04, 7.448549866676330566e-01, -7.066448330879211426e-01),
            doubleArrayOf(2.807145565748214722e-02, -1.978818699717521667e-02, 7.375805377960205078e-01, -7.006978988647460938e-01),
            doubleArrayOf(4.187516868114471436e-03, 6.769187748432159424e-04, 7.409607768058776855e-01, -7.178480029106140137e-01),
            doubleArrayOf(2.452819794416427612e-02, -6.758909672498703003e-03, 7.272180914878845215e-01, -6.975991725921630859e-01),
            doubleArrayOf(2.005922049283981323e-02, -3.633908927440643311e-04, 7.389717698097229004e-01, -7.074938416481018066e-01),
            doubleArrayOf(2.184032648801803589e-02, 1.056864857673645020e-05, 7.487468719482421875e-01, -7.115160822868347168e-01),
            doubleArrayOf(2.341299504041671753e-02, -6.100591272115707397e-03, 7.405270338058471680e-01, -6.988047957420349121e-01),
            doubleArrayOf(2.722065895795822144e-02, -8.038293570280075073e-03, 7.558292746543884277e-01, -7.223932147026062012e-01),
            doubleArrayOf(5.342118442058563232e-03, 1.608147099614143372e-02, 7.074373960494995117e-01, -6.836847066879272461e-01),
            doubleArrayOf(1.840709894895553589e-02, -1.195501536130905151e-03, 7.232819795608520508e-01, -6.940838694572448730e-01),
            doubleArrayOf(1.775174587965011597e-02, -8.443307131528854370e-03, 7.268179059028625488e-01, -6.905324459075927734e-01),
            doubleArrayOf(2.803688496351242065e-02, -2.491767331957817078e-02, 7.297900319099426270e-01, -6.946006417274475098e-01),
            doubleArrayOf(1.745855063199996948e-02, -1.059372350573539734e-02, 7.464878559112548828e-01, -7.129927277565002441e-01),
            doubleArrayOf(1.501172035932540894e-02, -4.710923880338668823e-03, 7.432655096054077148e-01, -7.109428644180297852e-01),
            doubleArrayOf(9.916894137859344482e-03, 9.685564786195755005e-03, 7.332506775856018066e-01, -7.037137150764465332e-01),
            doubleArrayOf(4.930667579174041748e-03, 5.629051476716995239e-03, 7.390181422233581543e-01, -7.100261449813842773e-01),
            doubleArrayOf(6.910793483257293701e-03, 5.092728883028030396e-03, 7.402631640434265137e-01, -7.066712975502014160e-01),
            doubleArrayOf(-2.596385776996612549e-03, 2.086083963513374329e-02, 7.277218699455261230e-01, -6.974114775657653809e-01),
            doubleArrayOf(-1.776970177888870239e-02, 3.031538799405097961e-02, 7.189740538597106934e-01, -7.022319436073303223e-01),
            doubleArrayOf(-6.459005177021026611e-03, 2.483298256993293762e-02, 7.276389598846435547e-01, -7.012340426445007324e-01),
            doubleArrayOf(4.868797957897186279e-03, 2.056001499295234680e-02, 7.344992160797119141e-01, -7.041587829589843750e-01),
            doubleArrayOf(2.466034144163131714e-02, -2.249132841825485229e-03, 7.433961033821105957e-01, -7.030097246170043945e-01),
            doubleArrayOf(-1.910705119371414185e-02, 3.302549198269844055e-02, 7.399750351905822754e-01, -7.100434899330139160e-01),
            doubleArrayOf(-2.372563630342483521e-02, 3.213023021817207336e-02, 7.346127629280090332e-01, -7.085187435150146484e-01),
            doubleArrayOf(2.017956227064132690e-02, -1.615304872393608093e-02, 7.322232127189636230e-01, -7.097931504249572754e-01),
            doubleArrayOf(1.601331233978271484e-01, -1.550081521272659302e-01, 7.199339270591735840e-01, -6.891772150993347168e-01),
            doubleArrayOf(3.184223175048828125e-01, -3.373978734016418457e-01, 6.494953036308288574e-01, -6.241966485977172852e-01),
            doubleArrayOf(4.069204926490783691e-01, -4.268018603324890137e-01, 5.996564030647277832e-01, -5.607351660728454590e-01),
            doubleArrayOf(4.648483395576477051e-01, -4.888336658477783203e-01, 5.349771380424499512e-01, -4.985710978507995605e-01),
            doubleArrayOf(4.688800573348999023e-01, -4.918364286422729492e-01, 5.319218039512634277e-01, -4.978287220001220703e-01),
            doubleArrayOf(4.684236049652099609e-01, -4.936131536960601807e-01, 5.224968791007995605e-01, -4.893735051155090332e-01),
            doubleArrayOf(4.742970466613769531e-01, -4.948409199714660645e-01, 5.217398405075073242e-01, -4.860954284667968750e-01),
            doubleArrayOf(4.781523048877716064e-01, -4.981896281242370605e-01, 5.226365327835083008e-01, -4.907625615596771240e-01),
            doubleArrayOf(4.777260422706604004e-01, -4.975432455539703369e-01, 5.179367661476135254e-01, -4.841406941413879395e-01),
            doubleArrayOf(4.767653942108154297e-01, -4.947341680526733398e-01, 5.110569596290588379e-01, -4.804646968841552734e-01),
            doubleArrayOf(4.890771210193634033e-01, -4.978774189949035645e-01, 5.203209519386291504e-01, -4.800207614898681641e-01),
            doubleArrayOf(4.737255275249481201e-01, -4.858896136283874512e-01, 5.220331549644470215e-01, -4.868161678314208984e-01),
            doubleArrayOf(4.766687750816345215e-01, -4.996465444564819336e-01, 5.317627787590026855e-01, -4.899598062038421631e-01),
            doubleArrayOf(4.769446253776550293e-01, -4.998450875282287598e-01, 5.315113663673400879e-01, -4.894952178001403809e-01),
            doubleArrayOf(4.732837080955505371e-01, -4.875522255897521973e-01, 5.346326231956481934e-01, -4.961527585983276367e-01),
            doubleArrayOf(4.764705300331115723e-01, -4.867606163024902344e-01, 5.346068143844604492e-01, -4.957360923290252686e-01),
            doubleArrayOf(4.775107502937316895e-01, -4.817543029785156250e-01, 5.362282991409301758e-01, -5.034933686256408691e-01),
            doubleArrayOf(4.922937154769897461e-01, -5.040303468704223633e-01, 5.170632600784301758e-01, -4.808266758918762207e-01),
            doubleArrayOf(4.935812950134277344e-01, -5.095931291580200195e-01, 5.090842843055725098e-01, -4.718088507652282715e-01),
            doubleArrayOf(4.975111186504364014e-01, -5.193445682525634766e-01, 5.002967715263366699e-01, -4.581048488616943359e-01),
            doubleArrayOf(5.106058716773986816e-01, -5.357262492179870605e-01, 4.926297962665557861e-01, -4.648740887641906738e-01),
            doubleArrayOf(6.077811121940612793e-01, -6.205902695655822754e-01, 3.515468537807464600e-01, -3.556700944900512695e-01),
            doubleArrayOf(6.541205644607543945e-01, -7.401046156883239746e-01, 1.973925530910491943e-01, -1.593201458454132080e-01),
            doubleArrayOf(6.948618888854980469e-01, -7.493616342544555664e-01, 5.548578873276710510e-02, -4.299347847700119019e-02)
        )
        var index = 0
        var task: Runnable? = null
        task = Runnable {
            if (index < posSet.size) {
                val data = mapInfo!!.modelToWorld(posSet[index].toFloatList(), true)
                map_container.pos(data[0] / mapInfo!!.actualSize[0], data[1] / mapInfo!!.actualSize[1])
                map_container.rotate(-quaternionToEuler(angleSet[index].toFloatList())[2])
                index++
                if (task != null) {
                    map_container.postDelayed(task, 200)
                }
            }
        }
        map_container.postDelayed(task, 200)
    }

    private fun initMapAndInfo() {
        map_container.onMarkerClickListener = this
        bottomSheetBehavior = BottomSheetBehavior.from(bottom_sheet).apply {
            state = BottomSheetBehavior.STATE_COLLAPSED
            // addBottomSheetCallback(object : BottomSheetBehavior.BottomSheetCallback() {
            //     override fun onSlide(bottomSheet: View, slideOffset: Float) {
            //         // TODO("Not yet implemented")
            //     }
            //
            //     override fun onStateChanged(bottomSheet: View, newState: Int) {
            //         // TODO("Not yet implemented")
            //     }
            // })
        }
        as_start_point.setOnClickListener {
            val data = it.tag as Pair<DeepNaviPoint, Int>
            // TODO()
        }
        as_end_point.setOnClickListener {
            val data = it.tag as Pair<DeepNaviPoint, Int>
            // TODO()
        }
        val hideBottomSheetListener = View.OnClickListener {
            if (bottomSheetBehavior.state != BottomSheetBehavior.STATE_COLLAPSED) {
                bottomSheetBehavior.state = BottomSheetBehavior.STATE_COLLAPSED
            }
        }
        bottom_sheet.setOnClickListener(hideBottomSheetListener)
    }

    private fun initMapConfigBar() {
        findViewById<Button>(R.id.upload).setOnClickListener {
            UploadMapDialogFragment(this, this, this).show(supportFragmentManager, "uploadMap")
        }
        findViewById<Button>(R.id.search).setOnClickListener {
            SearchMapDialogFragment(this, this, this).show(supportFragmentManager, "searchMap")
        }
        findViewById<Button>(R.id.add_point).setOnClickListener {
            if (mapInfo == null) {
                return@setOnClickListener returnToast3("map info is null, your should create a map or load a map")
            }
            AddPointDialogFragment(mapInfo!!, this).show(supportFragmentManager, "addPoint")
        }
        findViewById<Button>(R.id.add_edge).setOnClickListener {
            if (mapInfo == null || mapInfo!!.id == null) {
                return@setOnClickListener returnToast3("map info is null or map id is null, your should create a map or load a map")
            }
            if (allPoints == null) {
                doGetMainAsync("$GET_POINTS?mapId=${mapInfo!!.id}") getAllPoints@{
                    val jsonObj = SimpleJsonParser.fromJsonOrNull(
                        String(it?.content ?: return@getAllPoints returnToast3("no response for getting all points"))
                    ) as? SimpleJsonObject ?: return@getAllPoints returnToast3("getting all points failed while parse json")
                    val iterator = (jsonObj["data"] as? SimpleJsonArray)?.iterator()
                        ?: return@getAllPoints returnToast3("getting all points failed: ${(jsonObj["msg"] as? SimpleJsonString)?.value() ?: "unknown reason"}")
                    val points = mutableListOf<DeepNaviPoint>()
                    while (iterator.hasNext()) {
                        val next = iterator.next() ?: continue
                        val point = ReflectJsonApi.fromJsonOrNull<DeepNaviPoint>(next, DeepNaviPoint::class.java) ?: continue
                        point.modelToWorld(mapInfo!!)
                        points.add(point)
                    }
                    allPoints = points
                    AddEdgeDialogFragment(mapInfo!!.id!!, points, this).show(supportFragmentManager, "addEdge")
                }
                Toast.makeText(this, "please wait for points' loading", Toast.LENGTH_LONG).show()
            } else {
                AddEdgeDialogFragment(mapInfo!!.id!!, allPoints!!, this).show(supportFragmentManager, "addEdge")
            }
        }
    }

    private fun initNavigation() {
        deepNaviManager = MainActivity.initDeepNaviManagerByWS(this) {
            if (it.flag == 1) {
                return@initDeepNaviManagerByWS returnToast3("navigation finished")
            }
            val mapInfo = this.mapInfo ?: return@initDeepNaviManagerByWS
            val coordinate = mapInfo.modelToWorld(listOf(it.coor.x, it.coor.y, it.coor.z), true)
            map_container.pos(coordinate[0] / mapInfo.actualSize[0], coordinate[1] / mapInfo.actualSize[1])
            map_container.rotate(
                if (mapInfo.isClockWise) {
                    it.rotation - mapInfo.offsetAngle
                } else {
                    mapInfo.offsetAngle - it.rotation
                }
            )
        }
        val configDataSet = ConfigProperty.SIGNAL_CONFIG_SET.value?.split(',')?.toSet() ?: emptySet()
        if ("image" in configDataSet) {
            val imageSize = ConfigProperty.DEEPNAVI_IMAGE_SIZE.value ?: ConfigProperty.DEFAULT_PICTURE_SIZE
            audioListener2 = AudioListener2(this, null, pictureSize = Size(imageSize.width, imageSize.height))
            deepNaviManager.addDataCollector(audioListener2 as DataCollectorInter<Any>)
        }
        if ("wifiList" in configDataSet) {
            deepNaviManager.addDataCollector(WifiListener(this) as DataCollectorInter<Any>)
        }
        SensorListeners.initAll(configDataSet)

        cancel_navigation.setOnClickListener {
            navigation_bar.isVisible = false
            config_map_bar.isVisible = true
            deepNaviManager.pathId = null
            this.allPoints = null
        }
        stop_navigation.setOnClickListener {
            audioListener2?.cameraUtil?.stopPreview()
            deepNaviManager.stop()
            SensorListeners.unregisterAll()
        }
        start_navigation.setOnClickListener {
            if (audioListener2 != null) {
                if (!audioListener2!!.haveOpenCamera) {
                    audioListener2!!.cameraUtil.openCamera()
                }
                audioListener2!!.cameraUtil.startPreview()
            }
            SensorListeners.registerAll(ConfigProperty.getRates(), configDataSet)
            deepNaviManager.loop()
        }
    }

    @SuppressLint("SetTextI18n")
    override fun onMarkerClick(view: View?, position: Int) {
        val point = allPoints?.get(position) ?: return
        point_name.text = "${point.name} (index: $position)"
        var t = point.planCoordinate
        point_plan_location.text = "show: ${t.x}px x ${t.y}px x ${t.z}px"
        t = point.actualCoordinate
        point_actual_location.text = "actual: ${t.x}m x ${t.y}m x ${t.z}m"
        point_id.text = "id: ${point.id}"
        point_map_id.text = "id: ${point.mapId}"
        val data = point to position
        as_start_point.tag = data
        as_end_point.tag = data
        bottomSheetBehavior.state = BottomSheetBehavior.STATE_EXPANDED
        Toast.makeText(this, "你点击了第" + position + "个marker", Toast.LENGTH_SHORT).show()
    }

    override fun dispatchTouchEvent(ev: MotionEvent?): Boolean {
        if (bottomSheetBehavior.state != BottomSheetBehavior.STATE_COLLAPSED) {
            bottomSheetBehavior.state = BottomSheetBehavior.STATE_COLLAPSED
        }
        return super.dispatchTouchEvent(ev)
    }

    override fun update(bitmap: Bitmap, load: Boolean) {
        this.bitmap = bitmap
        map_container.mMapView.setImageBitmap(bitmap)
    }

    override fun update(x: Float, y: Float, z: Float, flag: Int, name: String?, id: String?) {
        val mapInfo = this.mapInfo ?: return returnToast3("map info is null, so cannot locate percentage point")
        /*update(
            mapInfo.planSize[0] * x, mapInfo.planSize[1] * y, mapInfo.planSize[2] * z,
            mapInfo.actualSize[0] * x, mapInfo.actualSize[1] * y, mapInfo.actualSize[2] * z,
            flag, name
        )*/
        if (flag == 1 || x < 0f || y < 0f) {
            if (marker != null) {
                map_container.removeMarker(marker!!)
                marker = null
            }
        } else if (flag == 2) {
            if (marker != null) {
                val data = DeepNaviPoint()
                data.mapId = mapInfo.id ?: return returnToast3("map id is null")
                data.planCoordinate = DeepNaviCoordinator(x * mapInfo.planSize[0], y * mapInfo.planSize[1], z * mapInfo.planSize[2])
                data.actualCoordinate = DeepNaviCoordinator(x * mapInfo.actualSize[0], y * mapInfo.actualSize[1], z * mapInfo.actualSize[2])
                // data.name = name ?: marker!!.index.toString()
                data.id = id ?: INVALID_STR
                if (allPoints == null) {
                    allPoints = mutableListOf(data)
                } else {
                    allPoints!!.add(data)
                }
                marker!!.data = data
                marker!!.name = id
                marker = null
            }
        } else if (marker == null) {
            marker = Marker(x, y, R.drawable.point)
            marker!!.name = name
            map_container.addMarker(marker!!)
        } else if (x < 1f) {
            marker!!.name = name
            marker!!.scaleX = x
            marker!!.scaleY = y
        } else {
            marker!!.name = name
            marker!!.scaleX = x / bitmap!!.width
            marker!!.scaleY = y / bitmap!!.height
        }
    }

    override fun update(x: Float, y: Float, z: Float, xF: Float, yF: Float, zF: Float, flag: Int, name: String?, id: String?) {
        val mapInfo = this.mapInfo ?: return returnToast3("map info is null, so cannot locate plan point and actual point")
        if (flag == 1 || x < 0f || y < 0f) {
            if (marker != null) {
                map_container.removeMarker(marker!!)
                marker = null
            }
        } else if (flag == 2) {
            if (marker != null) {
                val data = DeepNaviPoint()
                data.mapId = mapInfo.id ?: return returnToast3("map id is null")
                data.planCoordinate = DeepNaviCoordinator(x, y, z)
                data.actualCoordinate = DeepNaviCoordinator(xF, yF, zF)
                // data.name = name ?: marker!!.index.toString()
                data.id = id ?: INVALID_STR
                if (allPoints == null) {
                    allPoints = mutableListOf(data)
                } else {
                    allPoints!!.add(data)
                }
                marker!!.data = data
                marker!!.name = id
                marker = null
            }
        } else if (marker == null) {
            marker = Marker(x / bitmap!!.width, y / bitmap!!.height, R.drawable.point)
            marker!!.name = name
            map_container.addMarker(marker!!)
        } else {
            marker!!.name = name
            marker!!.scaleX = x / bitmap!!.width
            marker!!.scaleY = y / bitmap!!.height
        }
    }

    override fun update(mapInfo: DeepNaviMap) {
        this.mapInfo = mapInfo
    }

    override fun update(pId1: String?, pId2: String?, flag: Int) {
        if (mapInfo == null) {
            return returnToast3("map info is null, so cannot locate edge")
        }
        val markers = map_container.mMarkers ?: return returnToast3("map's points are empty")
        if (flag == 1 || pId1.isNullOrEmpty() || pId2.isNullOrEmpty()) {
            if (edge != null) {
                map_container.removeEdge(edge!!)
                edge = null
            }
        } else if (flag == 2) {
            if (edge != null) {
                val first = allPoints!!.find { it.id == pId1 }!!
                first.adjacence = first.adjacence.add(pId1)
                val second = allPoints!!.find { it.id == pId2 }!!
                second.adjacence = second.adjacence.add(pId2)
                edge = null
            }
        } else if (edge == null) {
            edge = LineEdge(markers.find { it.name == pId1 }?.index ?: return, markers.find { it.name == pId2 }?.index ?: return)
            map_container.addEdge(edge!!)
        } else {
            edge!!.startPointIndex = markers.find { it.name == pId1 }?.index ?: return
            edge!!.endPointIndex = markers.find { it.name == pId2 }?.index ?: return
        }
    }

    override fun onAllPointsGot(points: MutableList<DeepNaviPoint>, pathId: String?) {
        deepNaviManager.pathId = pathId
        this.allPoints = points
        if (pathId != null) {
            config_map_bar.isVisible = false
            navigation_bar.isVisible = true
        }
    }

    companion object {
        /**
         * import numpy as np
         * def coordinateRotation(roll: float, pitch: float, yaw: float, coor: np.matrix) -> np.matrix:
         *     roll = np.pi * roll / 180
         *     pitch = np.pi * pitch / 180
         *     yaw = np.pi * yaw / 180
         *     return np.matrix([
         *         [np.cos(yaw) * np.cos(pitch), np.sin(yaw) * np.sin(pitch) * np.sin(roll) - np.sin(yaw) * np.cos(roll), np.sin(yaw) * np.sin(roll) + np.cos(yaw) * np.cos(roll) * np.sin(pitch)],
         *         [np.cos(pitch) * np.sin(yaw), np.cos(yaw) * np.cos(roll) + np.sin(yaw) * np.sin(roll) * np.sin(pitch), np.cos(roll) * np.sin(yaw) * np.sin(pitch) - np.cos(yaw) * np.sin(roll)],
         *         [-np.sin(pitch), np.cos(pitch) * np.sin(roll), np.cos(roll) * np.cos(pitch)]
         *     ]) * coor
         *
         * @param roll 坐标系绕x轴旋转的角度
         * @param pitch 坐标系绕y轴旋转的角度
         * @param yaw 坐标系绕z轴旋转的角度
         * @param coordinate 坐标(必须是x,y,z这样的)
         */
        fun rotateCoordinate(roll: Float, pitch: Float, yaw: Float, coordinate: List<Float>): List<Float> {
            val r = roll * Math.PI.toFloat() / 180
            val p = pitch * Math.PI.toFloat() / 180
            val y = yaw * Math.PI.toFloat() / 180
            val cr = cos(r)
            val sr = sin(r)
            val cp = cos(p)
            val sp = sin(p)
            val cy = cos(y)
            val sy = sin(y)
            val temp = matrixMultipleF(
                listOf(
                    listOf(cy * cp, sy * sp * sr - sy * cr, sy * sr + cy * cr * sp),
                    listOf(cp * sy, cy * cr + sy * sr * sp, cr * sy * sp - cy * sr),
                    listOf(-sp, cp * sr, cr * cp)
                ),
                listOf(listOf(coordinate[0]), listOf(coordinate[1]), listOf(coordinate[2]))
            )!!
            return listOf(temp[0][0], temp[1][0], temp[2][0])
        }

        /**
         * 简单的矩阵乘法
         */
        fun matrixMultipleF(m1: List<List<Float>>, m2: List<List<Float>>): List<List<Float>>? =
            if (m1.isNotEmpty() && m2.isNotEmpty() && m1[0].size == m2.size) {
                val len3 = m2[0].size
                m1.map { list1 ->
                    (0 until len3).map { list2Index ->
                        list1.mapIndexed { index, item -> item * m2[index][list2Index] }.reduce { acc, i -> acc + i }
                    }
                }
            } else {
                null
            }

        /**
         * 向量夹角公式
         */
        fun angleBetweenVector(x1: Float, y1: Float, x2: Float, y2: Float): Float =
            x1 * x2 + y1 * y2 / sqrt(x1.pow(2) + y1.pow(2)) * sqrt(x2.pow(2) + y2.pow(2))

        /**
         * def quaternion_to_euler(rotation_output: torch.Tensor) -> typing.List:
         *     rotation_w = rotation_output[0]
         *     rotation_x = rotation_output[1]
         *     rotation_y = rotation_output[2]
         *     rotation_z = rotation_output[3]
         *     x = math.atan2(2 * (rotation_y * rotation_z + rotation_w * rotation_x),
         *                    (rotation_w * rotation_w - rotation_x * rotation_x - rotation_y * rotation_y + rotation_z * rotation_z))
         *     y = math.asin(2 * (rotation_w * rotation_y - rotation_x * rotation_z))
         *     z = math.atan2(2 * (rotation_x * rotation_y + rotation_w * rotation_z),
         *                    (rotation_w * rotation_w + rotation_x * rotation_x - rotation_y * rotation_y - rotation_z * rotation_z))
         *     return [x * 180 / math.pi, y * 180 / math.pi, z * 180 / math.pi]
         */
        fun quaternionToEuler(q: List<Float>): List<Float> {
            val w = q[0]
            val x = q[1]
            val y = q[2]
            val z = q[3]
            val x2 = atan2(2 * (y * z + w * x), (w * w - x * x - y * y + z * z))
            val y2 = asin(2 * (w * y - x * z))
            val z2 = atan2(2 * (x * y + w * z), (w * w + x * x - y * y - z * z))
            return listOf(x2 * 180 / Math.PI.toFloat(), y2 * 180 / Math.PI.toFloat(), z2 * 180 / Math.PI.toFloat())
        }

        fun DoubleArray.toFloatList(): List<Float> = this.map { it.toFloat() }
    }
}

// TODO: 图片格式
// TODO: fragment scrollView与软键盘的冲突
// TODO: 坐标系转换

// [三维空间坐标系变换-旋转矩阵](https://blog.csdn.net/fireflychh/article/details/82352710?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task)
// [如何通俗地解释欧拉角？之后为何要引入四元数？](https://www.zhihu.com/question/47736315)
// [旋转矩阵*百度百科](https://baike.baidu.com/item/%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5/3265181?fr=aladdin)
// [【Unity编程】欧拉角与万向节死锁（图文版）](https://blog.csdn.net/AndrewFan/article/details/60981437#)
