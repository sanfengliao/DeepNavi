apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

// apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.sysu.example"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    // compileOptions {
    //     sourceCompatibility = 1.8
    //     targetCompatibility = 1.8
    // }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    // implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // testImplementation 'junit:junit:4.12'
    // androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    // androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    api project(":deepnavi")
    api ("io.socket:socket.io-client:${socketio_client_version}") {
        exclude group: 'org.json', module: 'json'
    }
    api "org.java-websocket:Java-WebSocket:${java_websocket_version}"
    api "androidx.recyclerview:recyclerview:${recyclerview_version}"
    api "com.google.code.gson:gson:${gson_version}"

    // ViewModel and LiveData
    api "androidx.lifecycle:lifecycle-extensions:${lifecycle_version}"
    // alternatively - just ViewModel
    api "androidx.lifecycle:lifecycle-viewmodel:${lifecycle_version}" // For Kotlin use lifecycle-viewmodel-ktx
    // alternatively - just LiveData
    api "androidx.lifecycle:lifecycle-livedata:${lifecycle_version}"
    // alternatively - Lifecycles only (no ViewModel or LiveData). Some UI
    //     AndroidX libraries use this lightweight import for Lifecycle
    api "androidx.lifecycle:lifecycle-runtime:${lifecycle_version}"

    annotationProcessor "androidx.lifecycle:lifecycle-compiler:${lifecycle_version}" // For Kotlin use kapt instead of annotationProcessor
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    api "androidx.lifecycle:lifecycle-common-java8:${lifecycle_version}"

    // optional - ReactiveStreams support for LiveData
    api "androidx.lifecycle:lifecycle-reactivestreams:${lifecycle_version}" // For Kotlin use lifecycle-reactivestreams-ktx

    // optional - Test helpers for LiveData
    // testImplementation "androidx.arch.core:core-testing:$lifecycle_version"
}
